package com.petshop.customerAccount;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.transaction.Transactional;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

// BUS LOGIC
@Service
public class AccountService {

    // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private final AccountRepository accountRepository;

    @Autowired
    public AccountService(AccountRepository accountRepository) {
        this.accountRepository = accountRepository;
    }

    //for admin and editor
    public Account addNewCustomer(String userName, String passWord, String roles) {
        return accountRepository.save(new Account(userName, passWord, roles));
    }

    public List<Account> getCustomer() {
        return accountRepository.findAll();
    }

    public void deleteAccount(Integer id) {

        boolean checkId = accountRepository.existsById(id);

        if (!checkId) {
            throw new IllegalStateException("Customer with id " + id + " does not exists!");
        }

        accountRepository.deleteById(id);
    }

    @Transactional
    public void updateAccount(Integer id, String username, String password, String roles) {
//        System.out.println(username +"-"+ password +"-"+ rule);

        Account customerAccount = accountRepository.findById(id)
                .orElseThrow(() -> new IllegalStateException(
                        "Account with id " + id + "does not exsits!"
                ));

        if ((username != null && username.length() > 0 && !Objects.equals(customerAccount.getUserName(), username) &&
                (password != null && password.length() > 0 && !Objects.equals(customerAccount.getPassWord(), password)))) {

            accountRepository.findById(id)
                    .map(account -> {
                        account.setUserName(username);
                        account.setPassWord(password);
                        account.setRoles(roles);
                        return accountRepository.save(account);
                    });
        }
    }

    public List<Account> signIn(String username, String password) {
        List<Account> account = new ArrayList<>();
//      System.out.println(username +" <> "+password);
        if ((username != null && username.length() > 0) && (password != null && password.length() > 0)) {
            Optional<Account> signin = accountRepository.findByAccount(username, password);
//           System.out.println(signin.get().getRules().equals("admin, editor"));
//            System.out.println(Arrays.toString(rule));
//            System.out.println(signin.get().);
//            signin.ifPresent(e -> {
////                System.out.println(e);
//            });
            account.add(signin.get());
        } else {
            return null;
        }
        return account;
    }

    public Account signUp(String username, String password, String roles) {
        return accountRepository.save(new Account(username,password, roles));
    }
}
